#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1848 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/batch-io"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 18 #"lang/htdp-advanced"
0 0 24 3 1 #" "
0 0 14 3 7 #"explode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"Tokenizer for the following lexical speci"
0 0 17 3 8 #"fication"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"keyword:     define | cond | else"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"symbol:"
0 1 17 65 1 #"\t"
0 0 17 3 16 #"     (    |    )"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"intConstant: one or more digits"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"stringConst: \" any sequence of chars besides double quote or newlin"
 #"e \""
) 0 0 17 29 1 #"\n"
0 0 17 3 83
(
 #"identifier:  any other sequence of non-whitespace characters startin"
 #"g with a letter"
) 0 0 17 29 1 #"\n"
0 0 17 3 43 #"comment:     ;  ...  till newline character"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; DATA DEFINITION FOR TOKENS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; TOKType is one of the symbols:"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;  'KEYWORD 'SYMBOL 'INT 'STR 'IDENT 'COMMENT 'UNKNOWN"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 4 #")   "
0 9          49 4           0 0           0 7 0 14 3 4 #"What"
0 0 24 3 1 #" "
0 0 14 3 4 #"does"
0 0 24 3 1 #" "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #" "
0 0 14 3 5 #"mean?"
0           0 0 0 24 29 1 #"\n"
0 0 17 3 31 #";; A Token is (token TOKType X)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"KEYWORD"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"INT-CONST"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Tokenizer object"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; An FSMState is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;   - 'START"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;   - 'COMMENT"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;   - 'INT-CONST"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;   - 'STR-CONST"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;   - 'KEY"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;   - 'IDENT"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;   - 'SYMBOL"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; A Tokenizer is"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;       (tokenizer input        ; in: a list of input characters"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;                  FSMState     ; st: the current state"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;                  string)       ; acc: accumulated token so far"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 2 #"  "
0 0 14 3 9 #"tokenizer"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"inp"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; Tokenizer Mutable varibables"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; A keyword is a one of the following strings:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"KEY-LIST"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"class\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"constructor\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"function\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"method\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"char\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"boolean\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 19 3 6 #"\"void\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"true\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"null\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"let\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"return\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; ----------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"12345"
0 0 19 3 1 #" "
0 0 19 3 11 #"98765 2480\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\\"SPACEBALLS THE STRING"
0 0 19 3 1 #" "
0 0 19 3 19 #"TEST\\\" \\\"SPACEBALLS"
0 0 19 3 1 #" "
0 0 19 3 3 #"THE"
0 0 19 3 1 #" "
0 0 19 3 14 #"SECOND TEST\\\"\""
0 0 24 3 3 #")) "
0 0 17 3 89
(
 #";NOTE: \\\" is used so that racket recongnizes that there is a quota"
 #"tion mark in the string"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"12345 \\\"SPACEBALLS THE"
0 0 19 3 1 #" "
0 0 19 3 6 #"STRING"
0 0 19 3 1 #" "
0 0 19 3 16 #"CONSTANT TEST\\\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"do this\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ident-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"SPACEBALLS THE INDENTITY\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"non-str-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"do SPACEBALLS THE TEST false FALSE\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"symbol-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{ } something do\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmt-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 79
(
 #"\"//this is a comment \\n /** somehting else */ /* this */ 12345 fal"
 #"se something\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; -----------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Top-level tokenizer functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; new-tokenizer : input-port -> tokenizer"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; sets up a tokenizer for the input from a given input port (file/s"
 #"tring/ect.)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"new-tokenizer"
0 0 24 3 2 #" ("
0 0 14 3 17 #"open-input-string"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"hi"
0 0 19 3 6 #" there"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"tokenizer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"h"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"i"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\" "
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"t"
0 0 19 3 1 #"\""
0 0 24 3 2 #"  "
0 0 19 3 2 #"\"h"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"e"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"r"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"e"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"START"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"new-tokenizer"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 2 #" ("
0 0 14 3 12 #"port->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; tokenFSM : tokenizer -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; creates a list of tokens of a program written in Jack"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-test"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"SPACEBALLS"
0 0 19 3 1 #" "
0 0 19 3 3 #"THE"
0 0 19 3 1 #" "
0 0 19 3 6 #"STRING"
0 0 19 3 5 #" TEST"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"SPACEBALLS"
0 0 19 3 1 #" "
0 0 19 3 3 #"THE"
0 0 19 3 1 #" "
0 0 19 3 6 #"SECOND"
0 0 19 3 5 #" TEST"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-test"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"INT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"12345"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"INT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"98765"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"INT"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"2480"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 15 3 4 #"case"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"INT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"12345"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"SPACEBALLS"
0 0 19 3 1 #" "
0 0 19 3 3 #"THE"
0 0 19 3 1 #" "
0 0 19 3 6 #"STRING"
0 0 19 3 1 #" "
0 0 19 3 8 #"CONSTANT"
0 0 19 3 5 #" TEST"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"... )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 14 #"is-whitespace?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-digit?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 9 #"int-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-quote?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"str-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #"))] "
0 0 17 3 36 #";you don't need the quotes for token"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"is-letter?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 7 #"keyword"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"maybe-comment"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"is-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 6 #"symbol"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; main state functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; int-const : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; creates an interger constant token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int-const"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"INT-CONSTANT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-digit?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 9 #"int-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"INT-CONSTANT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #")])) "
0 0 17 3 26 #";;push-back non-int string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; str-const : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; creates a string constant token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"str-const"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"STR-CONSTANT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-quote?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 9 #"str-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-quote?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; keyword : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; creates a keyword token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"keyword"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 14 3 8 #"KEY-LIST"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"is-letter?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 7 #"keyword"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 14 3 8 #"KEY-LIST"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 6 #")])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; identity : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; creates an identity token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; symbol : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; creates a symbol token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symbol"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; maybe-comment : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; checks if the \""
0 0 17 3 31 #"/\" is for a comment or a symbol"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"maybe-comment"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"*"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"comment"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"symbol"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; comment : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; creates a comment token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"comment"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"COMMENT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"*"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; comment helper functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; line-cmt : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; produces the comment token for a line comment"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line-cmt"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"COMMENT"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 11 #"is-newline?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; in-line-cmt: tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; produces the comment token for an in line or multi-line comment"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"COMMENT"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"*"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; low-level tokenizer helper functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; member? : str list-of-strings -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Determines if the string is in the list of strings"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"this"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 10 #"\"something"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"this"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"yet"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"test"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"this"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 10 #"\"something"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"This"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"false"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"a-los"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; reset-hold! : void -> void"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; resets TOK-HOLD to an empty string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; add-token! : token -> void"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; adds a token to the token list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-token!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-tok"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-tok"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; add-char! : 1-char-string -> void"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; sets TOK-HOLD as TOK-HOLD with the char appened to the end - assu"
 #"me a one char strin"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-char!"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-char"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;------------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Top-level Read/Write functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"main"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"command-line"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:args"
0 0 24 3 3 #" (["
0 0 14 3 8 #"filename"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"input.txt\""
0 0 24 3 3 #"]) "
0 0 14 3 8 #"filename"
0 0 24 3 3 #")) "
0 9          49 4           0 0           0 7 0 14 3 3 #"Add"
0 0 24 3 1 #" "
0 0 14 3 7 #"tolkien"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 10 #"write-file"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 2 #" ("
0 0 14 3 10 #"read-lines"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"one-string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"lines"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"tolkien"
0 0 24 3 2 #" ("
0 0 14 3 8 #"tokenFSM"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 14 3 10 #"one-string"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"START"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Done\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"output-file-name"
0 0 24 3 2 #" ("
0 0 14 3 19 #"path-replace-suffix"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 19 3 11 #"\".changeme\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"write-file"
0 0 24 3 1 #" "
0 0 14 3 16 #"output-file-name"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; character class predicates i.e. functions that evaluate whether a"
 #" "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; character falls into one of the basic classifications of characte"
 #"rs"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";; ASSUME: the input is a one-letter string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; - :  1String -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-digit?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"char-numeric?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-paren?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"is-semicolon?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\;"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-newline?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-quote?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"is-letter?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"char-alphabetic?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"is-whitespace?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"char-whitespace?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"is-symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"char-symbolic?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"char-punctuation?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0           0
