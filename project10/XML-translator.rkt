#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 5401 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/batch-io"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 18 #"lang/htdp-advanced"
0 0 24 3 1 #" "
0 0 14 3 7 #"explode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"pro"
0 0 14 3 1 #"v"
0 0 14 3 1 #"i"
0 0 14 3 2 #"de"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; DATA DEFINITION FOR TOKENS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; TOKType is one of the symbols:"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;  'KEYWORD 'SYMBOL 'INT 'STR 'IDENT 'COMMENT 'UNKNOWN"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 4 #")   "
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; A Token is (token TOKType X)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"E1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"KEYWORD"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"E2"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"INT-CONST"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Tokenizer object"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; An FSMState is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;   - 'START"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;   - 'COMMENT"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;   - 'INT-CONST"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;   - 'STR-CONST"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;   - 'KEY"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;   - 'IDENT"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;   - 'SYMBOL"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; A Tokenizer is"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;       (tokenizer input        ; in: a list of input characters"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;                  FSMState     ; st: the current state"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;                  string)       ; acc: accumulated token so far"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 2 #"  "
0 0 14 3 9 #"tokenizer"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"inp"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; Tokenizer Mutable varibables"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; A keyword is a one of the following strings:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"KEY-LIST"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"class\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"constructor\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"function\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"method\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"char\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"boolean\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 19 3 6 #"\"void\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"true\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"null\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"let\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"return\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; An XML command is a string in the form of"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; <type> input </type> where a type is a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"XML"
0 0 24 3 2 #" ("
0 0 14 3 4 #"open"
0 0 24 3 1 #" "
0 0 14 3 5 #"close"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 5 #"class"
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"<class>\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"</class>\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Terminals"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; Terminals are one of the following"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; - keyword"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; - symbol"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; - integerConstant"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; - stringConstant"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; - identifier"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; They correspond to the five lexical elements of the Jack Language"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"TERMINAL-TBL"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"<keyword> ~a </keyword>\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"<symbol> ~a </symbol>\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"'"
0 0 14 3 12 #"INT-CONSTANT"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"<integerConstant> ~a </integerConstant>\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"<stringConstant> ~a </stringConstant>\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"<identifier> ~a </identifier>\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Non-Termainals --------------"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; any of the following"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - class"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; - statments"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; - expression"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; Any non-terminal language elements in jack"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; A statement is one of the following,"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; - whileStatement,"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; - ifStatement,"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; - returnStatement,"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; - letStatement,"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; - doStatement,"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"NON-T-TBL"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"<class>\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"</class>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 13 #"\"classVarDec\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"<classVarDec>\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"</classVarDec>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 15 #"\"subroutineDec\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"<subroutineDec>\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\"</subroutineDec>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 15 #"\"parameterList\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"<parameterList>\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\"</parameterList>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 16 #"\"subroutineBody\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"<subroutineBody>\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"</subroutineBody>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 8 #"\"varDec\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"<varDec>\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"</varDec>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 11 #"\"statement\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"<statement>\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"</statement>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 14 #"\"letStatement\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"<letStatement>\""
0 0 24 3 1 #" "
0 0 19 3 17 #"\"</letStatement>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 13 #"\"ifStatement\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"<ifStatement>\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"</ifStatement>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 16 #"\"whileStatement\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"<whileStatement>\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"</whileStatement>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 13 #"\"doStatement\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"<doStatement>\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"</doStatement>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 17 #"\"returnStatement\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"<ReturnStatement>\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\"</ReturnStatement>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 12 #"\"expression\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"<expression>\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"</expression>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 6 #"\"term\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"<term>\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"</term>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 17 #"\"subroutine-call\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"<subroutineCall>\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"</subroutineCall>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 16 #"\"expressionList\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"XML"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"<expressionList>\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"</expressionList>\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; Operator is one of the following"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; an Operator (op) is one of the following symbols"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"op-lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"*\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"/\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"&\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"/|\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Unary Operator"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; a Unary Operator (uo) is one of the following symbols"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"uo-lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"~\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Keyword Constant"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; a Keyword Constant is one of the following"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"KEY-CONST"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"true\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"null\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; --------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Parse Symbol Table"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 2 #") "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; a parse table is (parse-table name hash-tbl)"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; symbol tables for functions where name is the name of the functio"
 #"n"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";; and the table is all the symbols within"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"GLOBAL-TBL"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-table"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"global\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"TBL-LST"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"GLOBAL-TBL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; -----------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Jack Var"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; a jack-var is a variable in the Jack language"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"jack-var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 4 #"kind"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; a jack-var is (jack-var string type kind number)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; a type is one of"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; int, string, boolean, class"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; a class is the name of any object created in the program"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; a kind is one of"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - field"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; - static"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; - arguement"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; - var"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Examples"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"JV1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"jack-var"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"car\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"JV2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"jack-var"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"amt\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; --------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Test Cases"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"main\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"varName-test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 4 #")  ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"class-close-test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"main\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 4 #")  ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"subroutine-test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"function\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"void\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"varDec-test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"temp\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"int\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; --------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Hold variables"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"HOLD"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; ----------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"12345 98765 2480\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\\"SPACEBALLS THE STRING"
0 0 19 3 1 #" "
0 0 19 3 38 #"TEST\\\" \\\"SPACEBALLS THE SECOND TEST\\\"\""
0 0 24 3 3 #")) "
0 0 17 3 89
(
 #";NOTE: \\\" is used so that racket recongnizes that there is a quota"
 #"tion mark in the string"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"12345 \\\"SPACEBALLS THE STRING CONSTANT TEST\\\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"key-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"do this\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ident-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"SPACEBALLS THE INDENTITY\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"non-str-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"do SPACEBALLS THE TEST false FALSE\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"symbol-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{ } something do\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmt-test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 19 3 79
(
 #"\"//this is a comment \\n /** somehting else */ /* this */ 12345 fal"
 #"se something\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;------------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Top-level Read/Write functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"main"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"command-line"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:args"
0 0 24 3 3 #" (["
0 0 14 3 8 #"filename"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Square\\\\SquareGame.jack\""
0 0 24 3 3 #"]) "
0 0 14 3 8 #"filename"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"file"
0 0 24 3 2 #" ("
0 0 14 3 9 #"read-file"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"parse-begin"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 4 #"file"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"tolkien"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 4 #"HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Done\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"output-file-name"
0 0 24 3 2 #" ("
0 0 14 3 19 #"path-replace-suffix"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 19 3 6 #"\".xml\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"write-file"
0 0 24 3 2 #" ("
0 0 14 3 12 #"path->string"
0 0 24 3 1 #" "
0 0 14 3 16 #"output-file-name"
0 0 24 3 3 #") ("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 7 #"tolkien"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; -----------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Top-level tokenizer functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; tokenFSM : tokenizer -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; creates a list of tokens of a program written in Jack"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 14 #"is-whitespace?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-digit?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 9 #"int-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-quote?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"str-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #"))] "
0 0 17 3 36 #";you don't need the quotes for token"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"is-letter?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 7 #"keyword"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"maybe-comment"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"is-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 6 #"symbol"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; main state functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; int-const : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; creates an interger constant token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int-const"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"INT-CONSTANT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-digit?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 9 #"int-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"INT-CONSTANT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #")])) "
0 0 17 3 26 #";;push-back non-int string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; str-const : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; creates a string constant token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"str-const"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"STR-CONSTANT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-quote?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 9 #"str-const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"is-quote?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; keyword : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; creates a keyword token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"keyword"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 14 3 8 #"KEY-LIST"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"is-letter?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 7 #"keyword"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 14 3 8 #"KEY-LIST"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 6 #")])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; identity : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; creates an identity token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; symbol : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; creates a symbol token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"symbol"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; maybe-comment : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; checks if the \"/\" is for a comment or a symbol"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"maybe-comment"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"comment"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"symbol"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; comment : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; creates a comment token"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"comment"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-token!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"COMMENT"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; comment helper functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; line-cmt : tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; produces the comment token for a line comment"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line-cmt"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"COMMENT"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 11 #"is-newline?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-char!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; in-line-cmt: tokenizer -> token"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; produces the comment token for an in line or multi-line comment"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"COMMENT"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #") ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 14 #"tokenFSM-start"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-line-cmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-toker"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; low-level tokenizer helper functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; member? : str list-of-strings -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Determines if the string is in the list of strings"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 11 #"\"something\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"yet\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"this\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 11 #"\"something\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"This\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"a-los"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; reset-hold! : void -> void"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; resets TOK-HOLD to an empty string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"reset-hold!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; add-token! : token -> void"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; adds a token to the token list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-token!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-tok"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-tok"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-LIST"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; add-char! : 1-char-string -> void"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; sets TOK-HOLD as TOK-HOLD with the char appened to the end - assu"
 #"me a one char strin"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-char!"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"TOK-HOLD"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-char"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; character class predicates i.e. functions that evaluate whether a"
 #" "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; character falls into one of the basic classifications of characte"
 #"rs"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";; ASSUME: the input is a one-letter string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; - :  1String -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-digit?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"char-numeric?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-paren?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"is-semicolon?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\;"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-newline?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-quote?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"is-letter?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"char-alphabetic?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"is-whitespace?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"char-whitespace?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"is-symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"char-symbolic?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"char-punctuation?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"is-backslash?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; --------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Top Level Parsing Functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; Parse-begin : list-of-tokens -> void"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; translates the list of tokens into XML"
0 0 17 3 6 #" using"
0 0 17 3 1 #" "
0 0 17 3 4 #"Jack"
0 0 17 3 11 #" as a base "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-begin"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")) "
0 0 19 3 7 #"\"class\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"class-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"HOLD"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"error no class declaration\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; --------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Main Parsing Functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; class-dec : list-of-tokens -> void"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; parses the intitial class declaration"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"class-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 24 #";;declares keyword class"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 21 #";;declares class name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 22 #";; declares symbol \"{\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"var-maybe"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; var-maybe : list-of-tokens -> void"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; checks to see if there are any variable declarations"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"var-maybe"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"check-var"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"class-var-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"subroutine-maybe"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; class-var-dec : list-of-tokens -> list-of-tokens "
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; declares a variable"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"class-var-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"classVarDec\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #" ("
0 0 14 3 15 #"class-var-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"classVarDec\""
0 0 24 3 3 #")) "
0 0 17 3 35 #";; declares the \"classVarDec\" close"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"subroutine-maybe"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; var-dec-class : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; recurive call for var-dec-class"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"class-var-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 43 #";; declares the keyword for static or field"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 46 #";; declares the keyword or identifier for type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"other"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"var-dec?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"other"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"class-var-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"other"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"other"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; var-dec? : string -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; checks to see if a var dec starts"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-dec?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; var-set! : list of tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; declares all the variable names"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"var-set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 37 #";; declares indentifier for variables"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 35 #";;declares symbol either \",\" or \";\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"var-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; subroutine-maybe : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; checks for a subroutine"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"subroutine-maybe"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"class-close"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"subroutine-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; subroutine-dec : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; declares a subroutine"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"subroutine-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"subroutineDec\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 30 #";; declares type of subroutine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";; declares return type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 27 #";; declares subroutine name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 22 #";; declares \"(\" symbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"parameterList\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fifth"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 14 #"parameter-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"parameterList\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 4 #"))) "
0 0 17 3 21 #";;declares symbol \")\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"subroutine-body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; parameter-set! : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; declares all paramenters"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"parameter-set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 25 #";; declares variable type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 25 #";; declares variable name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #")))  "
0 0 17 3 22 #";; declares \",\" symbol"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 14 #"parameter-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")])) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; subroutine-body : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; declares the subroutine-body"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"subroutine-body"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"subroutineBody\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 32 #";;declares either the symbol \"{\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"varDec"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"statementDec"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; varDec : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; declares the varibles inside a subroutine body"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"varDec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"varDec\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 25 #";; declares \"var\" keyword"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 20 #";; declares var type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #" ("
0 0 14 3 14 #"var-set-names!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \";\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"varDec\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"varDec"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"statementDec"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; var-set-names! : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; helper function for varDec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"var-set-names!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 17 #";declare var name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 14 #"var-set-names!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; statementDec : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; declares all statements within a subroutine body"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"statementDec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"statement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #" ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"}\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"statement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"class-close"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"subroutine-dec"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; state-statementDec ; list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; declares all statemetns for the if statement"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-statementDec"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"statement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #" ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"}\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"statement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; statementDec-recur : list-of-tokens -> list-of tokens"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; recursive portion of statementDec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"let\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"letStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"if\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 11 #"ifStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"while\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 14 #"whileStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 11 #"doStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"return\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"returnStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; expression : list-of-tokens symbol -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; declares an expression and continues recursivily until stop symbo"
 #"l read"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"expression\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 16 #"expression-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"expression\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; expression-recur : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; recursive portion of expression function"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"expression-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"term-lst"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"op?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"term-lst"
0 0 24 3 5 #")))) "
0 0 14 3 8 #"term-lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"term-lst"
0 0 24 3 4 #"))) "
0 0 17 3 15 #";; declares op "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"expression-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"term-lst"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; expression-list : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; declares a expression list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"expression-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"expressionList\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-lst"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 5 #"a-lot"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 21 #"expression-list-recur"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 14 3 1 #"-"
0 0 14 3 3 #"lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"expressionList\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"expr-lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; expression-list-recur : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; recursive portion of expression-list function"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"expression-list-recur"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"expr"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \",\""
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 21 #"expression-list-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; term : list-of-tokens -> list-of-tokens "
0 7          13 17           0 0           0 1 0 14 3 18
#"ABSTRACT!/Overhaul"
0           0 0 0 24 29 1 #"\n"
0 0 17 3 18 #";; declares a term"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"term\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"INT-CONSTANT"
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"STR"
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"key-const?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 6 #")))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 40 #";declares keyword constant or int or str"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #"("
) 0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 7 #"))))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 24 #";declares variable name "
0 0 24 29 1 #"\n"
0 0 24 3 79
(
 #"                                                                    "
 #"          ("
) 0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"IDENT"
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 6 #")))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";declares variable name"
0 0 24 29 1 #"\n"
0 0 24 3 73
(
 #"                                                                    "
 #"    ("
) 0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"[\""
0 0 24 29 1 #"\n"
0 0 24 3 73
(
 #"                                                                    "
 #"    ("
) 0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 73
(
 #"                                                                    "
 #"    ("
) 0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"]\""
0 0 24 29 1 #"\n"
0 0 24 3 73
(
 #"                                                                    "
 #"    ("
) 0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 6 #")))) ("
0 0 14 3 15 #"subroutine-call"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"(\""
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \")\""
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"uo?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"break\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"term\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"term"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; subroutine-call : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; declares a subrountine call"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"subroutine-call"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"subroutine-call\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 24 #";declares subroutineName"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"(\""
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-lst"
0 0 24 3 2 #" ("
0 0 14 3 15 #"expression-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-lst"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \")\""
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-lst"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 6 #")))  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 30 #";declares classname or varname"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \".\""
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 25 #";declares subroutine name"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"(\""
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-lst2"
0 0 24 3 2 #" ("
0 0 14 3 15 #"expression-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-lst2"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \")\""
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"subroutine-call\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-lst2"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; class-close : list-of-tokens -> void"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; closes the class"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"class-close"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; -----------------------------------------------------------------"
 #"-----"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Statement Parsing Functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; letStatement : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; declares let statements"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"letStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"letStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 15 #";declares \"let\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 17 #";declares varName"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 15 #";; declares \"[\""
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 4 #"))) "
0 0 17 3 15 #";; decalres \"]\""
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"RECUR"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"=\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"RECUR2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"RECUR2"
0 0 24 3 4 #"))) "
0 0 17 3 15 #";; declares \";\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"letStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"RECUR2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; ifStatement : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; declares if statements"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ifStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"ifStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"(\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \")\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"{\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 2 #" ("
0 0 14 3 12 #"statementDec"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 5 #"))) ("
0 0 14 3 14 #"else-statement"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"ifStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; else-statement : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; finishes declaring the if statements"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 14 #";declares else"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"{\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 2 #" ("
0 0 14 3 12 #"statementDec"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \"}\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"ifStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; whileStatement : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; declares a while statement"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"whileStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"whileStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 16 #"; declares while"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 14 #"; decalres \"(\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \")\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";decalres \"{\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 2 #" ("
0 0 14 3 12 #"statementDec"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 3 #")))"
0 0 17 3 13 #";declares \"}\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"whileStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; doStatement : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; declares a do statement"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"doStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"doStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 12 #";declares do"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"sub-call"
0 0 24 3 2 #" ("
0 0 14 3 15 #"subroutine-call"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"sub-call"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \";\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"doStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"sub-call"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; ReturnStatement : list-of-tokens -> list-of-tokens"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; decalres a return statement"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"returnStatement"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"returnStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 25 #"; declares return keyword"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \";\""
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"returnStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lot"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";declares \";\""
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"returnStatement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 18 #"statementDec-recur"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; ---------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Low level Parsing Functions/ Helper Functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; dec-terminal : token -> string"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; translates a token into a terminal XML command"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"KEY"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 2 #"))"
0 0 19 3 28 #"\"<keyword> class </keyword>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dec-terminal"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-token"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"format"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"TERMINAL-TBL"
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-token"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"token-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-token"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; HOLD-set! : String -> void"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; cons the given string onto HOLD"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"HOLD-set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"HOLD"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 14 3 4 #"HOLD"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; get-open : string -> string"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; gets the XML-open for a given string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 2 #") "
0 0 19 3 9 #"\"<class>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-open"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"XML-open"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"NON-T-TBL"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; get-close : string -> string"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; gets the XM:-close for a given string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"class\""
0 0 24 3 2 #") "
0 0 19 3 10 #"\"</class>\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-close"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"XML-close"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"NON-T-TBL"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; check-var : string -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; checks to see if the string starts a variable declaration"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"check-var"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"check-var"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"check-var"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"anything else\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"check-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"static\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-str"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; op? : symbol -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; checks to see if the given token value is an op"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"op?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"op?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"op?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-sym"
0 0 24 3 3 #")) "
0 0 14 3 6 #"op-lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; uo? : symbol -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; checks to see if the given token value is an uo"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"uo?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"~\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"uo?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"uo?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-sym"
0 0 24 3 3 #")) "
0 0 14 3 6 #"uo-lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;key-const? : string -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; checks to see if the given token value is a key constant"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"key-const?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"key-const?"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"something\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"key-const?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-tok"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-tok"
0 0 24 3 3 #")) "
0 0 14 3 9 #"KEY-CONST"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; ---------------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";(main)"
0           0
