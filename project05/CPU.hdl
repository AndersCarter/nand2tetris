// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	
	/**
	 *instruction input in the form of ixxaccccccdddjjj
	 *instruction[15]=i selects if it is an A command or C command
	 *instruction[14]=x //extra binary digits for A commands
	 *instruction[13]=x
	 *instruction[12]=a chooses between the first set of commands or the second
	 *instruction[11]=c1 commands from c1 to c6 are for the ALU
	 *instruction[10]=c2
	 *instruction[9]=c3
	 *instruction[8]=c4
	 *instruction[7]=c5
	 *instruction[6]=c6
	 *instruction[5]=d1 A Destination
	 *instruction[4]=d2 D Destination
	 *instruction[3]=d3 M Destination
	 *instruction[2]=j1 jumps if less than 0
	 *instruction[1]=j2 jumps if equal to 0
	 *instruction[0]=j3 jumps if greater than 0
	 */
 
	Mux16(b=ALUout, a=instruction, sel=instruction[15], out=toA); //selects between new input and old input based on whether or not it is an A or C command or i
	Not(in=instruction[15], out=AC);
	Or(a=AC, b=instruction[5], out=Asel);//loads the A register if there is an A command or if A is the destination. 
	ARegister(in=toA, load=Asel, out=selAM, out[0..14]=addressM);
	
	
	Mux16(a=selAM, b=inM, sel=instruction[12], out=AMout); //selects between using the value in the A register or the value in M as the other addidtion in the ALU
	
	ALU(x=Dout, y=AMout, 
		zx=instruction[11],
		nx=instruction[10], 
		zy=instruction[9],
		ny=instruction[8], 
		f=instruction[7], 
		no=instruction[6],
	out=outM, out=ALUout, zr=zrout, ng=ngout); 
	And(a=instruction[15], b=instruction[4], out=Dload); //loads the D register only if it is a C command and it is the destination
	DRegister(in=ALUout, load=Dload, out=Dout); 
	
	AND-DREW(in=instruction[0..2], zr=zrout, ng=ngout, out=JMP); //new chip to select in the Counter if there is a jump or not
	And(a=instruction[15], b=JMP, out=jump); //only jumps if a c command is given
	Not(in=jump, out=null); //load for inc (only increments if not jump)
	
	PC(in=selAM, reset=reset, inc=null, load=jump, out[0..14]=pc);
	
	And(a=instruction[15], b=instruction[3], out=writeM); //writes to M if it is a c command and destination is set to M
 
 }